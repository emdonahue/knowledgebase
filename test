#!/bin/zsh

assert() {
    if [[ $# == 1 || "$2" != "$3" ]]; then
	echo "Failure: $1"
	ERR=1
	if [[ "$2" != "$3" ]]; then echo "\tExpected: $3\n\tReceived: $2"; fi
    fi
}

function teardown() {
    cd "$DIR"
    rm -rf inbox md5 text org bib
}

AMD5=$(md5sum <<< 'a' | cut -f1 -d' ')
BMD5=$(md5sum <<< 'b' | cut -f1 -d' ')
CMD5=$(md5sum <<< 'c' | cut -f1 -d' ')

KB=$(realpath ./kb)
DIR=$(mktemp -d)
trap "rm -rf $DIR" EXIT
cd "$DIR"

assert 'bad file structure' "$($KB import 2>&1)" 'kb directory structure not detected. Use "kb init" to create a new directory structure.'

$KB init
echo 'a' > inbox/a.pdf
echo 'b' > inbox/b.txt
echo 'c' > inbox/c.txt
echo 'z' > md5/$AMD5.pdf
touch -d 'Last week' inbox/a.pdf
touch -d 'Yesterday' inbox/b.txt

#import
$KB import -k import=bib -k import2=bib2
touch -d 'Last week' org/$AMD5.org
touch -d 'Yesterday' org/$BMD5.org

[[ -f inbox/a.pdf ]] && assert 'import inbox a'
[[ -f inbox/b.txt ]] && assert 'import inbox b'
[[ -f md5/$AMD5.pdf ]] || assert 'import m5d a'
[[ -f md5/$BMD5.txt ]] || assert 'import m5d b  '
[[ -f bib/$AMD5 ]] || assert 'import bib a'
[[ -f bib/$BMD5 ]] || assert 'import bib b'
[[ -f org/$AMD5.org ]] || assert 'import org a'
assert 'import org link' "$(head -n1 org/$AMD5.org)" '[[file:../md5/'"$AMD5"'.pdf][a]]'
[[ -f org/$BMD5.org ]] || assert 'import org b'
assert 'import bib' "$(cat bib/$AMD5)" "$(echo 'filename\ta\nimport\tbib\nimport2\tbib2\ntitle\ta')"

#md5
assert 'md5' "$($KB md5)" "$(echo "$CMD5\n$BMD5\n$AMD5")"
assert 'md5 -eq z' "$($KB md5 title -eq z)" ""
assert 'md5 -eq b' "$($KB md5 title -eq b)" "$(echo "$BMD5")"
assert 'md5 -eq a' "$($KB md5 title -eq a)" "$(echo "$AMD5")"
assert 'md5 --bib -eq a' "$($KB md5 --bib -eq a)" "$(echo "$AMD5")"
assert 'md5 --org -eq a' "$($KB md5 --org -eq $AMD5.pdf)" "$(echo "$AMD5")"
assert 'md5 -ne a' "$($KB md5 title -ne a)" "$(echo "$CMD5\n$BMD5")"
assert 'md5 -ne a' "$($KB md5 --org -ne $AMD5.pdf)" "$(echo "$CMD5\n$BMD5")"
assert 'md5 -a' "$($KB md5 title -eq a -a title -eq a)" "$(echo "$AMD5")"
assert 'md5 implicit -a' "$($KB md5 title -eq a title -eq a)" "$(echo "$AMD5")"
assert 'md5 -o multiple' "$($KB md5 title -eq a -o title -eq c)" "$(echo "$CMD5\n$AMD5")"
assert 'md5 -o duplicate' "$($KB md5 title -eq a -o title -eq a)" "$(echo "$AMD5")"
assert 'md5 -o --subq' "$($KB md5 title -eq a -o --subq <($KB md5 title -eq c))" "$(echo "$CMD5\n$AMD5")"
assert 'md5 -i' "$($KB md5 -i title -eq a)" "$(echo "$AMD5")"
assert 'md5 -si' "$($KB md5 -si)" "$(echo "$AMD5\n$BMD5\n$CMD5")"
assert 'md5 -sir' "$($KB md5 -rsi)" "$(echo "$CMD5\n$BMD5\n$AMD5")"

#ls
assert 'ls' "$($KB ls)" "$(echo 'c\nb\na')"
assert 'ls stdin' "$(echo "$AMD5" | $KB ls -a)" "$(echo "a")"
assert 'ls metadata' "$($KB ls -c filename -c md5)" "$(echo "c\t$CMD5\nb\t$BMD5\na\t$AMD5")"
assert 'ls header' "$($KB ls -h -c filename -c md5)" "$(echo "filename\tmd5\nc\t$CMD5\nb\t$BMD5\na\t$AMD5")"
cp .config .config-old
echo 'LS_COLUMNS=(filename md5)' > .config
assert 'ls config' "$($KB ls)" "$(echo "c\t$CMD5\nb\t$BMD5\na\t$AMD5")"
mv .config-old .config

#org
assert 'org' "$(EDITOR=echo $KB org title -eq a)" "$(echo "org/$AMD5.org")"
assert 'org redundant query' "$(EDITOR=echo $KB org -i title -eq a)" "$(echo "org/$AMD5.org")"

#bib
$KB bib -d import -d import2 title -eq a
assert 'bib print' "$($KB bib title -eq a)" "$(echo 'filename\ta\ntitle\ta')"
$KB bib -d title title -eq a
assert 'bib -d title' "$(cat bib/$AMD5)" "$(echo 'filename\ta')"
$KB bib -k title=a filename -eq a
assert 'bib -k title=a' "$(cat bib/$AMD5)" "$(echo 'filename\ta\ntitle\ta')"
$KB bib -k title=b -k id=a filename -eq a
assert 'bib -k title=b -k id=a' "$(cat bib/$AMD5)" "$(echo 'filename\ta\nid\ta\ntitle\ta\ntitle\tb')"
$KB bib -d title -d filename title -eq a
assert 'bib -d title filename' "$(cat bib/$AMD5)" "$(echo 'id\ta')"
$KB bib -k title=a -k filename=a -d id id -eq a
assert 'bib -k title=a -k filename=a -d id' "$(cat bib/$AMD5)" "$(echo 'filename\ta\ntitle\ta')"
$KB bib -d title=b -d filename=a title -eq a
assert 'bib -d title=b filename=a' "$(cat bib/$AMD5)" "$(echo 'title\ta')"
$KB bib -s title=b title -eq a
assert 'bib -s title=b' "$(cat bib/$AMD5)" "$(echo 'title\tb')"
$KB bib -k title=b title -eq b
assert 'bib -s title=b' "$(cat bib/$AMD5)" "$(echo 'title\tb')"

[[ -z "$ERR" ]] && echo "All Tests Pass"
exit "$ERR"
